name: On Push, Build and Terraform Apply

on:
  push:
    branches:
      - main  # Trigger this workflow on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to main branch

jobs:
  build-deploy:
    name: Build and Deploy Code
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required to exchange the GitHub token for AWS credentials
      contents: read   # Standard permission to read the repository

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.S3_PARIAH_NEXUS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build API Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pariah-nexus-api:latest -f ./Dockerfile .

      - name: Build DB Docker image
        run: docker build \
              --build-arg TARGET_S3_BUCKET_NAME=${{ secrets.TARGET_S3_BUCKET_NAME }} \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/pariah-nexus-db:latest -f ./Database/Dockerfile .

      - name: Push API Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/pariah-nexus-api:latest

      - name: Push DB Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/pariah-nexus-db:latest

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build-deploy
    if: success()

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.TERRAFORM_PARIAH_NEXUS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Step 2: Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0  # Adjust this to your Terraform version

      # Step 3: Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Step 4: Run Terraform Plan
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      # Step 5: Upload the plan file as an artifact
      - name: Upload Plan File
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: ./terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan  # Only run this job if 'terraform-plan' completes successfully
    if: success()  # Only proceed if the previous job succeeded

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.TERRAFORM_PARIAH_NEXUS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Step 2: Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0  # Adjust this to your Terraform version

      # Step 3: Download the plan artifact
      - name: Download Plan Artifact
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: ./terraform

      # Step 4: Run Terraform Apply (auto-approved)
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
